{"version":3,"file":"static/js/961.ccaa0f26.chunk.js","mappings":"oPA4FA,UAhFqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAEpDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAC5BT,GAAa,GACbJ,EAAgB,IAChBE,EAAS,MAET,IAAMY,EAAYC,YAAW,WAAM,wCACjC,8GAEkCC,EAAAA,EAAAA,IAAapB,EAASgB,GAFxD,OAEUK,EAFV,OAGIjB,EAAgBiB,GAHpB,mDAK0B,aAAlB,KAAMC,QALd,mDAQIhB,EAAS,EAAD,IARZ,yBAUIiB,aAAaL,GACbV,GAAa,GAXjB,6EADiC,uBAAC,WAAD,wBAgBjCgB,EACD,GAAE,KAEH,OAAO,kBAAMR,EAAgBS,OAAtB,CACR,GAAE,CAACzB,IAEJ,IAAQ0B,EACNvB,EADMuB,MAAOC,EACbxB,EADawB,OAAQC,EACrBzB,EADqByB,SAAUC,EAC/B1B,EAD+B0B,YAAaC,EAC5C3B,EAD4C2B,aAAcC,EAC1D5B,EAD0D4B,aAEtDC,GACE,OAANL,QAAM,IAANA,OAAA,EAAAA,EAAQM,QAAS,EACbN,EAAOO,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,MACpC,YACAC,EAAcP,EAAeQ,KAAKC,MAAqB,GAAfT,GAAqB,WAC7DU,EAAc,IAAIC,KAAKV,GAAcW,cACrCC,EAAgBd,EAAW,UAC1Be,EAAAA,IAD0B,OACbzC,EAAa0B,aAC7BgB,EACEC,EAAa,OAAGlB,QAAH,IAAGA,EAAAA,EAAY,cAElC,OACE,6BAEE,SAAC,KAAD,CAAYmB,SAAUpC,EAAaqC,QAAnC,qBACCzC,IAAa,SAAC,KAAD,IACbF,IAAS,SAAC,KAAD,IAETqB,IACC,iCACE,SAAC,KAAD,CACEuB,UAAW,CACTjB,YAAAA,EACAc,cAAAA,EACAT,YAAAA,EACAG,YAAAA,EACAd,MAAAA,EACAiB,cAAAA,MAIJ,SAAC,KAAD,KACA,SAAC,EAAAO,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,WAMX,C","sources":["pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieById, IMG_ORIGIN } from 'services';\nimport {\n  ErrorFetch,\n  MovieCard,\n  MovieCardSkeleton,\n  AdditionalInformation,\n  BackButton,\n} from 'components';\nimport posterSkeleton from 'images/posterSkeleton.png';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    setIsLoading(true);\n    setMovieDetails([]);\n    setError(null);\n\n    const timeoutId = setTimeout(() => {\n      async function getMovie() {\n        try {\n          const getMovieDetails = await getMovieById(movieId, abortController);\n          setMovieDetails(getMovieDetails);\n        } catch (error) {\n          if (error.message === 'canceled') {\n            return;\n          }\n          setError(error);\n        } finally {\n          clearTimeout(timeoutId);\n          setIsLoading(false);\n        }\n      }\n\n      getMovie();\n    }, 2000);\n\n    return () => abortController.abort();\n  }, [movieId]);\n\n  const { title, genres, overview, poster_path, vote_average, release_date } =\n    movieDetails;\n  const movieGenres =\n    genres?.length > 0\n      ? genres.map(({ name }) => name).join(', ')\n      : 'No genres';\n  const movieRating = vote_average ? Math.round(vote_average * 10) : 'No value';\n  const releaseYear = new Date(release_date).getFullYear();\n  const imageToRender = poster_path\n    ? `${IMG_ORIGIN}${movieDetails.poster_path}`\n    : posterSkeleton;\n  const movieOverview = overview ?? 'No overview';\n\n  return (\n    <main>\n      {/* <Link to={backLinkHref.current}>Go back</Link> */}\n      <BackButton backPath={backLinkHref.current}>Go back</BackButton>\n      {isLoading && <MovieCardSkeleton />}\n      {error && <ErrorFetch />}\n\n      {title && (\n        <>\n          <MovieCard\n            movieData={{\n              movieGenres,\n              movieOverview,\n              movieRating,\n              releaseYear,\n              title,\n              imageToRender,\n            }}\n          />\n\n          <AdditionalInformation />\n          <Suspense fallback={null}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","error","setError","isLoading","setIsLoading","location","useLocation","backLinkHref","useRef","state","from","useEffect","abortController","AbortController","timeoutId","setTimeout","getMovieById","getMovieDetails","message","clearTimeout","getMovie","abort","title","genres","overview","poster_path","vote_average","release_date","movieGenres","length","map","name","join","movieRating","Math","round","releaseYear","Date","getFullYear","imageToRender","IMG_ORIGIN","posterSkeleton","movieOverview","backPath","current","movieData","Suspense","fallback"],"sourceRoot":""}