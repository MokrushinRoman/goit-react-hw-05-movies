{"version":3,"file":"static/js/736.cdee88d9.chunk.js","mappings":"gSAEaA,EAAYC,EAAAA,EAAAA,KAAH,uFAMTC,EAAOD,EAAAA,EAAAA,GAAH,sEAKJE,EAAOF,EAAAA,EAAAA,GAAH,yS,6BCkDjB,EAvDa,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBADd,wCAGd,6FACEH,GAAa,GACbF,EAAS,MAFX,mBAI2BM,EAAAA,EAAAA,IAAgBZ,EAASU,GAJpD,gBAIYP,EAJZ,EAIYA,KACRC,GAAQ,OAAID,IALhB,qDAO0B,aAAlB,KAAMU,QAPd,mDAUIP,EAAS,EAAD,IAVZ,yBAYIE,GAAa,GAZjB,8EAHc,sBAoBd,OApBc,mCAkBdM,GAEO,kBAAMJ,EAAgBK,OAAtB,CACR,GAAE,CAACf,KAGF,gCACGK,IAAS,SAAC,KAAD,IACTE,IAAa,SAAC,KAAD,IACbJ,EAAKa,OAAS,GACb,SAAClB,EAAD,UACGK,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACtB,EAAD,YACE,gBACEuB,IACED,EAAY,UAAME,EAAAA,IAAN,OAAmBF,GAAiBG,EAElDC,IAAKN,KAEP,uBAAIA,KACJ,4CAAkBC,OARTF,EADH,OAcZ,SAACtB,EAAD,+BAIP,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const EmptyCast = styled.span`\n  text-align: center;\n  padding: 20px 0;\n  font-size: 40px;\n`;\n\nexport const List = styled.ul`\n  padding: 10px 0;\n  display: inline-block;\n`;\n\nexport const Item = styled.li`\n  border: 1px solid #333333;\n  border-radius: 5px;\n  padding: 10px;\n  width: 250px;\n\n  & + li {\n    margin-top: 25px;\n  }\n\n  img {\n    display: inline-block;\n    width: 100px;\n    height: auto;\n    object-fit: cover;\n  }\n\n  p {\n    margin-top: 15px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services';\nimport { EmptyCast, Item, List } from './Cast.styled';\nimport { IMG_ORIGIN } from 'services';\nimport posterSkeleton from 'images/posterSkeleton.png';\nimport { ErrorFetch, Spinner } from 'components';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function getRevieews() {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const { cast } = await getMovieCredits(movieId, abortController);\n        setCast([...cast]);\n      } catch (error) {\n        if (error.message === 'canceled') {\n          return;\n        }\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getRevieews();\n\n    return () => abortController.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <ErrorFetch />}\n      {isLoading && <Spinner />}\n      {cast.length > 0 ? (\n        <List>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <Item key={id}>\n              <img\n                src={\n                  profile_path ? `${IMG_ORIGIN}${profile_path}` : posterSkeleton\n                }\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>{`Character: ${character}`}</p>\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <EmptyCast>No information</EmptyCast>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["EmptyCast","styled","List","Item","movieId","useParams","useState","cast","setCast","error","setError","isLoading","setIsLoading","useEffect","abortController","AbortController","getMovieCredits","message","getRevieews","abort","length","map","id","name","character","profile_path","src","IMG_ORIGIN","posterSkeleton","alt"],"sourceRoot":""}