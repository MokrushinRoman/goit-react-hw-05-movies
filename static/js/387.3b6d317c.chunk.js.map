{"version":3,"file":"static/js/387.3b6d317c.chunk.js","mappings":"2TAEaA,EAAeC,EAAAA,EAAAA,KAAH,uFAMZC,EAAOD,EAAAA,EAAAA,GAAH,uP,mBCFJE,EAAU,WACrB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBADd,wCAGd,6FACEH,EAAS,MACTF,GAAa,GAFf,mBAI8BM,EAAAA,EAAAA,IAAgBZ,EAASU,GAJvD,gBAIYG,EAJZ,EAIYA,QACRT,GAAW,OAAIS,IALnB,qDAO0B,aAAlB,KAAMC,QAPd,mDAUIN,EAAS,EAAD,IAVZ,yBAYIF,GAAa,GAZjB,8EAHc,sBAoBd,OApBc,mCAkBdS,GAEO,kBAAML,EAAgBM,OAAtB,CACR,GAAE,CAAChB,KAGF,gCACGO,IAAS,SAAC,KAAD,IACTF,IAAa,SAAC,KAAD,IACbF,EAAQc,OAAS,GAChB,SAACnB,EAAD,UACGK,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACX,2BACE,yCAAeA,MACf,uBAAID,MAFGD,EADE,OAQf,SAACvB,EAAD,2BAIP,EAED,G","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const EmptyReviews = styled.span`\n  text-align: center;\n  padding: 20px 0;\n  font-size: 40px;\n`;\n\nexport const List = styled.ul`\n  padding: 10px 0;\n\n  li {\n    border: 1px solid #333333;\n    border-radius: 5px;\n    padding: 10px;\n    \n  }\n\n  li + li {\n    margin-top: 25px;\n  }\n\n  b {\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services';\nimport { EmptyReviews, List } from './Reviews.styled';\nimport { ErrorFetch, Spinner } from 'components';\n\nexport const Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function getRevieews() {\n      setError(null);\n      setIsLoading(true);\n      try {\n        const { results } = await getMovieReviews(movieId, abortController);\n        setReviews([...results]);\n      } catch (error) {\n        if (error.message === 'canceled') {\n          return;\n        }\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getRevieews();\n\n    return () => abortController.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <ErrorFetch />}\n      {isLoading && <Spinner />}\n      {reviews.length > 0 ? (\n        <List>\n          {reviews.map(({ id, content, author }) => (\n            <li key={id}>\n              <b>{`Author: ${author}`}</b>\n              <p>{content}</p>\n            </li>\n          ))}\n        </List>\n      ) : (\n        <EmptyReviews>No reviews</EmptyReviews>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["EmptyReviews","styled","List","Reviews","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useEffect","abortController","AbortController","getMovieReviews","results","message","getRevieews","abort","length","map","id","content","author"],"sourceRoot":""}